{"version":3,"sources":["index.js"],"names":["Square","props","className","style","backgroundColor","onClick","value","Board","i","winningSquare","this","squares","rowDivs","squaresInRow","j","winningSquares","indexOf","console","log","push","renderSquare","React","createElement","key","Component","Game","state","history","Array","fill","stepNumber","xIsNext","ascendingNow","slice","length","calculateWinner","setState","concat","moveSquareNumber","step","status","current","winner","moves","map","move","moveCol","moveRow","Math","trunc","desc","jumpTo","toggleText","reverse","handleClick","toggleOrder","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7e4c71ee.chunk.js","sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\n\r\nfunction Square(props) {\r\n    return (\r\n        <button\r\n            className=\"square\"\r\n            style={{backgroundColor: props.backgroundColor}}\r\n            onClick={props.onClick}\r\n        >\r\n            {props.value}\r\n        </button>\r\n    );\r\n}\r\n\r\nclass Board extends React.Component {\r\n    renderSquare(i, winningSquare) {\r\n        return (\r\n            <Square\r\n                value={this.props.squares[i]}\r\n                backgroundColor={winningSquare ? \"yellow\": \"white\"}\r\n                onClick={() => this.props.onClick(i)}\r\n                key={i}\r\n            />\r\n        );\r\n    }\r\n\r\n    render() {\r\n        // list of divs\r\n        // each of which represent a row\r\n        const rowDivs = [];\r\n        for(let i=0; i < 9; i += 3){\r\n            // list of Square elements\r\n            // in the current row\r\n            let squaresInRow = [];\r\n            for(let j=i; j < (i + 3); j++){\r\n                let winningSquare = false;\r\n                if(this.props.winningSquares && (this.props.winningSquares.indexOf(j) !== -1)){\r\n                    // if the winningSquares prop is not null\r\n                    // and if the index of the element j is not -1\r\n                    // i.e, the element was found\r\n                    // the current square is a winning square\r\n                    winningSquare = true;\r\n                }\r\n\r\n                console.log('j: ', j);\r\n                console.log('winningSquares: ', this.props.winningSquares);\r\n                console.log('winningSquare: ', winningSquare);\r\n\r\n                squaresInRow.push(this.renderSquare(j, winningSquare));\r\n            }\r\n\r\n            // create a div to enclose the squares in the row\r\n            // push the div to the list of row divs\r\n            rowDivs.push(React.createElement(\"div\", {className: \"board-row\", key: i}, squaresInRow));\r\n        }\r\n        \r\n        return (\r\n            <div>\r\n                {rowDivs}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nclass Game extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            history: [{\r\n                squares: Array(9).fill(null),\r\n            }],\r\n            stepNumber: 0,\r\n            xIsNext: true,\r\n            ascendingNow: true,\r\n        };\r\n    }\r\n\r\n    handleClick(i) {\r\n        const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n        const current = history[history.length - 1];\r\n        const squares = current.squares.slice();\r\n\r\n        if(calculateWinner(squares) || squares[i]){\r\n            return;\r\n        }\r\n\r\n        squares[i] = this.state.xIsNext ? 'X' : 'O';\r\n        this.setState({\r\n            history: history.concat([{\r\n                squares: squares,\r\n                moveSquareNumber: i,\r\n            }]),\r\n            stepNumber: history.length,\r\n            xIsNext: !this.state.xIsNext,\r\n        });\r\n    }\r\n\r\n    jumpTo(step){\r\n        this.setState({\r\n            stepNumber: step,\r\n            xIsNext: (step % 2) === 0,\r\n        });\r\n    }\r\n\r\n    toggleOrder(){\r\n        this.setState({\r\n            ascendingNow: !this.state.ascendingNow,\r\n        })\r\n    }\r\n\r\n    render() {\r\n        const history = this.state.history;\r\n        const current = history[this.state.stepNumber];\r\n\r\n        // if there is a winner\r\n        // winner will contain an array of two items\r\n        // first item will be the mark of the winner\r\n        // the second will be another array\r\n        // containing the numbers of the winning squares\r\n        const winner = calculateWinner(current.squares);\r\n\r\n        let moves = history.map((step, move) => {\r\n            let moveSquareNumber = step.moveSquareNumber;\r\n            // column number will be modular with 3\r\n            let moveCol = moveSquareNumber % 3;\r\n            console.log('moveCol: ', moveCol);\r\n            // row number will be the integer quotient after dividing by 3\r\n            let moveRow = Math.trunc(moveSquareNumber / 3);\r\n            console.log('moveRow: ', moveRow);\r\n\r\n            // movCol and movRow will be NaN at move 0\r\n            // as moveSquareNumber will be Null\r\n            \r\n            const desc = move ?\r\n                'Go to move #' + move + (' (' + moveCol + ', ' + moveRow + ')'):\r\n                'Go to game start';\r\n\r\n            console.log('move: ', move);\r\n            console.log('stepNumber: ', this.state.stepNumber);\r\n            console.log('move === stepNumber: ', move === this.state.stepNumber);\r\n\r\n            return (\r\n                <li key={move}>\r\n                    <button\r\n                        style={move === this.state.stepNumber ?\r\n                            {backgroundColor: \"yellow\"}:\r\n                            {backgroundColor: 'white'}}\r\n\r\n                        onClick={() => this.jumpTo(move)}\r\n                    >\r\n                        {desc}\r\n                    </button>\r\n                </li>\r\n            );\r\n        });\r\n\r\n        let toggleText = 'Descending';\r\n        if(!this.state.ascendingNow){\r\n            // if ascendingNow is false\r\n            // reverse the moves array\r\n            // <li> enumeration will remain the same\r\n            moves = moves.slice(0).reverse();\r\n            toggleText = 'Ascending';\r\n        }\r\n        \r\n        let status;\r\n        if(winner) {\r\n            status = 'Winner: ' + winner[0];\r\n        }else if(this.state.stepNumber === 9){\r\n            // if 9 steps have passed\r\n            // without any winner\r\n            // then its a draw\r\n            status = 'Draw';\r\n        }else{\r\n            status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n        }\r\n\r\n        return (\r\n            <div className=\"game\">\r\n                <div className=\"game-board\">\r\n                    <Board\r\n                        squares={current.squares}\r\n                        winningSquares={winner ? winner[1]: null}\r\n                        onClick={(i) => this.handleClick(i)}\r\n                    />\r\n                </div>\r\n                <div className=\"game-info\">\r\n                    <div>{status}</div>\r\n                    <ol>{moves}</ol>\r\n                </div>\r\n                <div>\r\n                    <button onClick={() => this.toggleOrder()}>{toggleText}</button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nReactDOM.render(\r\n    <Game />,\r\n    document.getElementById('root')\r\n);\r\n\r\nfunction calculateWinner(squares) {\r\n    const lines = [\r\n        [0, 1, 2],\r\n        [3, 4, 5],\r\n        [6, 7, 8],\r\n        [0, 3, 6],\r\n        [1, 4, 7],\r\n        [2, 5, 8],\r\n        [0, 4, 8],\r\n        [2, 4, 6],\r\n    ];\r\n\r\n    for (let i=0; i < lines.length; i++){\r\n        const [a, b, c] = lines[i];\r\n        if(squares[a] && squares[a] === squares[b] && squares[a] === squares[c]){\r\n            // if square value at the index\r\n            // specified by the first element of the line exists\r\n            // compare it to the other square values in the line\r\n\r\n            // if three adjacent or diagonal squares\r\n            // have the same mark\r\n            // return the mark and the square numbers\r\n            return [squares[a], [a, b, c]];\r\n        }\r\n    }\r\n    return null;\r\n}"],"sourceRoot":""}